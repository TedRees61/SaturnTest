{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "35d1fed9-7595-474d-8b62-97cfb6d5f5d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-08T16:21:12.637558Z",
     "iopub.status.busy": "2022-08-08T16:21:12.637157Z",
     "iopub.status.idle": "2022-08-08T16:22:39.033886Z",
     "shell.execute_reply": "2022-08-08T16:22:39.033071Z",
     "shell.execute_reply.started": "2022-08-08T16:21:12.637532Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting package metadata (current_repodata.json): done\n",
      "Solving environment: failed with initial frozen solve. Retrying with flexible solve.\n",
      "Collecting package metadata (repodata.json): done\n",
      "Solving environment: failed with initial frozen solve. Retrying with flexible solve.\n",
      "\n",
      "PackagesNotFoundError: The following packages are not available from current channels:\n",
      "\n",
      "  - sklearn\n",
      "\n",
      "Current channels:\n",
      "\n",
      "  - https://conda.anaconda.org/conda-forge/linux-64\n",
      "  - https://conda.anaconda.org/conda-forge/noarch\n",
      "  - https://repo.anaconda.com/pkgs/main/linux-64\n",
      "  - https://repo.anaconda.com/pkgs/main/noarch\n",
      "  - https://repo.anaconda.com/pkgs/r/linux-64\n",
      "  - https://repo.anaconda.com/pkgs/r/noarch\n",
      "\n",
      "To search for alternate channels that may provide the conda package you're\n",
      "looking for, navigate to\n",
      "\n",
      "    https://anaconda.org\n",
      "\n",
      "and use the search bar at the top of the page.\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#conda list\n",
    "!conda install sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b43e9413-fcae-4d7e-9186-c8642ce11e7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import svm\n",
    "m3=-3 \n",
    "xx, yy = np.meshgrid(np.linspace(m3, 3, 500), np.linspace(m3, 3, 500))\n",
    "                     \n",
    "np.random.seed(0)\n",
    "X = np.random.randn(300, 2)\n",
    "Y = np.logical_xor(X[:, 0] > 0, X[:, 1] > 0)\n",
    "auto=\"auto\"\n",
    "nearest=\"nearest\"\n",
    "lower=\"lower\"\n",
    "dashed=\"dashed\"\n",
    "k=\"k\"\n",
    "# fit the model\n",
    "clf = svm.NuSVC(gamma=auto)\n",
    "clf.fit(X, Y)\n",
    " \n",
    "# plot the decision function for each datapoint on the grid\n",
    "Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])\n",
    "Z = Z.reshape(xx.shape)\n",
    " \n",
    "plt.imshow(\n",
    "    Z,\n",
    "    interpolation=nearest,\n",
    "    extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n",
    "    aspect=auto,\n",
    "    origin=lower,\n",
    "    cmap=plt.cm.PuOr_r,\n",
    ")\n",
    "contours = plt.contour(xx, yy, Z, levels=[0], \n",
    "                       linewidths=2, linestyles=dashed)\n",
    "plt.scatter(X[:, 0], X[:, 1], s=30, c=Y, \n",
    "            cmap=plt.cm.Paired, edgecolors=k)\n",
    "plt.xticks(())\n",
    "plt.yticks(())\n",
    "plt.axis([m3, 3,m3, 3])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef1306ef-6f09-4987-9b62-6788677d51c6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "saturn (Python 3)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
